{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/Notes-Django",
    "result": {"pageContext":{"slug":"notes/2020-05-30-django-notes/django-notes","id":"73fd4b22-a3ff-5894-89f8-2508e804e27b","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Notes Django\",\n  \"date\": \"2020-06-01T00:00:00.000Z\",\n  \"description\": \"Models, Views and more\",\n  \"folder\": \"blog\",\n  \"published\": true,\n  \"progress\": 25,\n  \"thumbnail\": \"python\",\n  \"tags\": [\"python\", \"Django\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Abstrac models\"), mdx(\"p\", null, \"An abstrac models is base model a class that could be used as base to create model more complex. But this model is not represent a table in the database. To create an abstrac class model I have to create a class Meta inside the class model. E.g\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"# Django\\nfrom django.db import models\\n\\nclass BaseModel(models.Model):\\n    \\\"\\\"\\\"Abstrac Class\\\"\\\"\\\"\\n\\n    created = models.DateTimeField(\\n        'created at',\\n        auto_now_add=True,\\n        help_text='Date time on which the object was created'\\n    )\\n    modified = models.DateTimeField(\\n        'modified at',\\n        auto_now=True,\\n        help_text='Date time on which the object was last modified'\\n    )\\n\\n    class Meta:\\n        \\\"\\\"\\\" Meta Obtions \\\"\\\"\\\"\\n        abstract = True\\n        get_latest_by = 'created'\\n        ordering = ['-created', '-modified']\\n\\nclass Student(BaseModel):\\n    name = models.CharField()\\n\\n    class Meta(BaseModel.Meta):\\n        db_table = 'student_role'\\n\")), mdx(\"h3\", null, \"Proxy models\"), mdx(\"p\", null, \"Proxy models allow you to inherit funtionality from models. And to add custum funtionality.\\ne.g:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"class Person(models.Model):\\n    first_name = models.CharField()\\n    last_name = models.CharField()\\n\\nclass MyPerson(Person):\\n    class Meta:\\n        proxy = True\\n\\n    def say_something(self, msg):\\n        print(msg)\\n\\n# good\\njohan = MyPerson.objects.get(id == 1)\\njohan.say_something('hi there')\\n# error\\nsebas = MyPerson.objects.get(id == 1)\\nsebas.say_something('hi there')\\n\")), mdx(\"h2\", null, \"ViewSets\"), mdx(\"p\", null, \"ViemSet are an complet tool that help to creat a CRUD in your API with a cuple line of code.\\nThe ViewSet is create along with a model serlializer. This ModelSerializer refer to model which the API will apply the CRUD. Even with all the work made it by a general code, it's possible to costumize a special validatio in the serialaizer. To do that it's just change a specific methods.\\nBut I got a few Questions.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"How the URLs are index to modified specific instance?\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"It's posible to create my own URLs index?\"), mdx(\"li\", {\n    parentName: \"ol\"\n  })), mdx(\"p\", null, \"a\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"date":"June 1, 2020","title":"Notes Django","folder":"blog"}}},
    "staticQueryHashes": []}