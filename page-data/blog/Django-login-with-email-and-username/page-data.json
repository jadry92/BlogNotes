{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/Django-login-with-email-and-username",
    "result": {"pageContext":{"slug":"tutorials/2020-07-21-django-login-with-email-and-username/django-login-with-email-and-username","id":"8840ca5d-9f42-5310-8bd9-eba52617a692","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Django login with email and username\",\n  \"date\": \"2020-07-21T00:00:00.000Z\",\n  \"description\": \"costume logins with django.\",\n  \"folder\": \"blog\",\n  \"published\": true,\n  \"progress\": 100,\n  \"thumbnail\": \"python\",\n  \"tags\": [\"Django\", \"login\", \"python\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This is a simple solution to create costume logins with django.\"), mdx(\"p\", null, \"Working in my project of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/jadry92/Platzigram-project\"\n  }, \"AIgram\"), \", I realise that Instagram allows users to login with their username, email and phone number. So I challenge my self to achieve that without breaking the Django authentication structure. Searching about on the internet I found \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://stackoverflow.com/questions/25316765/log-in-user-using-either-email-address-or-username-in-django\"\n  }, \"this post\"), \" where they show how to create multiples login checks using the Django authentication. My implementation of that I summarise in the next steps.\"), mdx(\"p\", null, \"First, add the authentication \\\"backend\\\" class in the \\\"settings.py\\\" that class has your login logic (login with email, log in with phone number, so on.).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"...\\nAUTHENTICATION_BACKENDS = [\\n    'django.contrib.auth.backends.ModelBackend',\\n    'users.backends.EmailModelBackend'\\n]\\n...\\n\")), mdx(\"p\", null, \"In this case, I add the default \\\"ModelBackend\\\" which allows me to log in with username and \\\"EmailModelBackend\\\" which is my costume.\"), mdx(\"p\", null, \"Second, create a python file \\\"backends.py\\\" in the \\\"users\\\" app with the class \\\"EmailModelBackend\\\".\\nThis class inherit from \\\"ModelBackend\\\" and re-write the method \\\"authenticate\\\" as is shown in the code.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"# Django\\nfrom django.contrib.auth.backends import ModelBackend\\n# Models\\nfrom users.models import User\\n\\nclass EmailModelBackend(ModelBackend):\\n    \\\"\\\"\\\"\\n    authentication class to login with the email address.\\n    \\\"\\\"\\\"\\n\\n    def authenticate(self, request, username=None, password=None, **kwargs):\\n\\n        if '@' in username:\\n            kwargs = {'email': username}\\n        else:\\n            return None\\n        if password is None:\\n            return None\\n        try:\\n            user = User.objects.get(**kwargs)\\n\\n        except User.DoesNotExist:\\n            User.set_password(password)\\n\\n        else:\\n            if user.check_password(password) and self.user_can_authenticate(user):\\n                return user\\n\\n\")), mdx(\"p\", null, \"I re-write the method base on the base \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/django/django/blob/3d16496037fbb8a6bbc6b6e354fa4f5eb65e6cea/django/contrib/auth/backends.py#L9\"\n  }, \"code\")), mdx(\"p\", null, \"Also, I create this unittest to make sure it's working properly:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"\\\"\\\"\\\"Login views unit test\\\"\\\"\\\"\\n\\n# Django\\nfrom django.test import TestCase, Client\\nfrom django.urls import reverse\\n# Models\\nfrom users.models import User\\n\\n\\nclass TestLoginView(TestCase):\\n    \\\"\\\"\\\"Test the functionality of the Login view\\\"\\\"\\\"\\n    def setUp(self):\\n        \\\"\\\"\\\"Initialise variables.\\\"\\\"\\\"\\n        self.client = Client()\\n        self.url = reverse('users:login')\\n\\n    def test_basic_login_username(self):\\n        \\\"\\\"\\\"Test basic login username\\\"\\\"\\\"\\n        response = self.client.post(reverse('users:signup'), {\\n            'username': 'john123',\\n            'password': '12345',\\n            'password_confirmation': '12345',\\n            'first_name': 'john',\\n            'last_name': 'smith',\\n            'email': 'john@smith.io'\\n        })\\n\\n        self.assertEquals(response.status_code, 302)\\n        self.assertEquals(response.url, reverse('users:send_email_verification'))\\n        self.assertEquals(User.objects.get(username='john123').email, 'john@smith.io')\\n\\n        response = self.client.post(self.url, {\\n            'username': 'john123',\\n            'password': '12345'\\n        })\\n\\n        self.assertEquals(response.status_code, 302)\\n        self.assertIsNone(response.context)\\n\\n    def test_basic_login_email(self):\\n        \\\"\\\"\\\"Test basic login email\\\"\\\"\\\"\\n        response = self.client.post(reverse('users:signup'), {\\n            'username': 'john123',\\n            'password': '12345',\\n            'password_confirmation': '12345',\\n            'first_name': 'john',\\n            'last_name': 'smith',\\n            'email': 'john@smith.io'\\n        })\\n\\n        self.assertEquals(response.status_code, 302)\\n        self.assertEquals(response.url, reverse('users:send_email_verification'))\\n        self.assertEquals(User.objects.get(username='john123').email, 'john@smith.io')\\n\\n        response = self.client.post(self.url, {\\n            'username': 'john@smith.io',\\n            'password': '12345'\\n        })\\n\\n        self.assertEquals(response.status_code, 302)\\n        self.assertIsNone(response.context)\\n\\n\")), mdx(\"h2\", null, \"To Have In mind:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The Django authentication checks all the backends and which first allow to authenticate will use.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The stronger of the system is equal at the weakest point.\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"date":"July 21, 2020","title":"Django login with email and username","folder":"blog"}}},
    "staticQueryHashes": []}