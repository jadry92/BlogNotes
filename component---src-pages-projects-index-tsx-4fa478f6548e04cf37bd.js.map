{"version":3,"file":"component---src-pages-projects-index-tsx-4fa478f6548e04cf37bd.js","mappings":"iKA2CA,EA7BoB,SAAC,GAAyC,IAEzCA,EAAgBC,EAFdC,EAAsC,EAAtCA,QAMfC,GAAeC,EAAAA,EAAAA,IAAmBF,EAAQG,UAEhD,OACEC,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,sBACbD,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,iDACbD,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,aACbD,EAAAA,cAAAA,KAAAA,CAAIC,UAAU,yBAAyBL,EAAQD,OAC/CK,EAAAA,cAAAA,IAAAA,CAAGC,UAAU,wBAAwBL,EAAQM,aAC7CF,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,QACbD,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,YACbD,EAAAA,cAAAA,MAAAA,CAAKC,UAAS,gBAAkBJ,EAAYM,MAC5CC,KAAK,cAAc,gBAAeP,EAAYQ,OAC9C,gBAAe,EAAG,gBAAe,IACjCC,MAAO,CAAEC,MAAUV,EAAYE,SAAjB,SAGlBC,EAAAA,cAACQ,EAAAA,KAAD,CAAMP,UAAU,iBAAiBQ,IApBtBf,EAoBoCE,EAAQF,OApB5BC,EAoBoCC,EAAQD,MAnBvE,IAAKD,EAAX,IAAqBC,EAAMe,QAAQ,KAAK,YC8C5C,EAzCuB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,iBAElBC,GAAOC,EAAAA,EAAAA,gBAAe,cAoB5B,OACEb,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,OACZW,EAAKE,OAAOC,MAAMC,KAAK,SAAEC,GACxB,IAAMrB,EAAU,CACdD,MAAQsB,EAAKC,YAAYvB,MACzBO,YAAce,EAAKC,YAAYhB,YAC/BiB,SAAU,GACVC,GAAIH,EAAKG,GACTC,KAAOJ,EAAKI,KACZ3B,OAAQuB,EAAKC,YAAYxB,OACzBK,SAAUkB,EAAKC,YAAYnB,UAG7B,OAAOC,EAAAA,cAACsB,EAAD,CAAaC,IAAK3B,EAAQwB,GAAIxB,QAASA,OAC7C4B,MAAM,EAAEb,M,iDCxCjB,UAVkB,SAAC,GAAuB,EAArBC,KAGnB,OACEZ,EAAAA,cAAAA,MAAAA,KACEA,EAAAA,cAACyB,EAAAA,EAAD,CAAgBd,iBAAkB,O,qBCLxC,SAASb,EAAmBC,GAE1B,IAAI2B,EAAU,CACZvB,MAAQ,GACRE,OAAS,EACTsB,OAAQ,GACR5B,SAAU,GA+BZ,OA5BIA,GAAY,GAAMA,EAAW,IAC/B2B,EAAQvB,MAAQ,eAChBuB,EAAQrB,OAAS,EACjBqB,EAAQC,OAAS,MACjBD,EAAQ3B,SAAWA,GACVA,GAAY,IAAOA,EAAW,IACvC2B,EAAQvB,MAAQ,YAChBuB,EAAQrB,OAAS,GACjBqB,EAAQC,OAAS,QACjBD,EAAQ3B,SAAWA,GACVA,GAAY,IAAOA,EAAW,IACvC2B,EAAQvB,MAAQ,aAChBuB,EAAQrB,OAAS,GACjBqB,EAAQC,OAAS,SACjBD,EAAQ3B,SAAWA,GACVA,GAAY,IAAOA,EAAW,KACvC2B,EAAQvB,MAAQ,aAChBuB,EAAQrB,OAAS,GACjBqB,EAAQC,OAAS,UACjBD,EAAQ3B,SAAWA,GACG,MAAbA,IACT2B,EAAQvB,MAAQ,aAChBuB,EAAQrB,OAAS,IACjBqB,EAAQC,OAAS,OACjBD,EAAQ3B,SAAWA,GAId2B,EAGT,SAASE,EAAUlC,EAAgBC,GACjC,MAAM,IAAKD,EAAX,IAAqBC,EAAMe,QAAQ,KAAK,K","sources":["webpack://blog/./src/components/ProjectCard/index.tsx","webpack://blog/./src/components/ProjectsLayout/index.tsx","webpack://blog/./src/pages/projects/index.tsx","webpack://blog/./src/utils/serializers.ts"],"sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\nimport { progressSerializer } from '../../utils/serializers'\n\ninterface IProject {\n  title : string;\n  description : string;\n  imageURL: string;\n  id: string;\n  slug : string;\n  folder: string;\n  progress: number;\n}\n\nconst ProjectCard = ({ project }: { project : IProject }) => {\n  \n  const createURL = (folder: string, title: string): string => {\n    return `/${folder}/${title.replace(/ /g,'-')}`\n  } \n\n  const progressObj =  progressSerializer(project.progress)\n  \n  return (\n    <div className=\"col-sm-12 col-md-6\">\n      <div className=\"card mb-5 mx-4 rounded bg-color-3 text-center\">\n        <div className=\"card-body\">\n          <h3 className=\"card-title text-white\">{project.title}</h3>\n          <p className=\"card-text text-white\">{project.description}</p>\n          <div className=\"px-5\">\n            <div className=\"progress\">\n              <div className={`progress-bar ${progressObj.color}`} \n              role=\"progressbar\" aria-valuenow={progressObj.nLevel} \n              aria-valuemin={0} aria-valuemax={100} \n              style={{ width: `${progressObj.progress}%` }}></div>\n            </div>\n          </div>\n          <Link className='stretched-link' to={createURL(project.folder, project.title)}></Link>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ProjectCard","import React from 'react'\nimport \"./styles.scss\"\nimport { Link, useStaticQuery, graphql } from 'gatsby';\nimport { progressSerializer } from '../../utils/serializers'\nimport ProjectCard from '../ProjectCard';\nimport { count } from 'console';\n\ninterface INode {\n  id: string;\n  slug : string;\n  frontmatter : {\n    description : string;\n    title : string;\n    folder : string;\n    progress : number; \n  }\n}\n\ninterface IProps {\n  numberOfProjects: number | undefined\n}\n\nconst ProjectsLayout = ({ numberOfProjects }: IProps) => {\n \n  const data = useStaticQuery(graphql`\n    query GET_ALL_PROJECTS_HOME {\n      allMdx(\n        filter: {frontmatter: {folder: {eq: \"projects\"}, published: {eq: true}}}\n        sort: {fields: frontmatter___levelImportance, order: ASC}\n        ) {\n        nodes {\n          slug\n          id\n          frontmatter {\n            description\n            title\n            folder\n            progress\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <div className=\"row\">\n      {data.allMdx.nodes.map( ( node: INode ) => {\n        const project = {\n          title : node.frontmatter.title, \n          description : node.frontmatter.description,\n          imageURL: '',\n          id: node.id,\n          slug : node.slug,\n          folder: node.frontmatter.folder,\n          progress: node.frontmatter.progress,\n        }\n\n        return <ProjectCard key={project.id} project={project} />\n      }).slice(0,numberOfProjects)}\n    </div>\n  )\n}\n\nexport default ProjectsLayout ","import React from 'react'\nimport ProjectsLayout from '../../components/ProjectsLayout'\n\n\ninterface IProps {\n  data : []\n}\n\nconst Portfolio = ({ data } : IProps ) => {\n\n\n  return (\n    <div>\n      <ProjectsLayout numberOfProjects={4}/>\n    </div>\n  )\n}\n\nexport default Portfolio","\ninterface progressReturn {\n  color : string;\n  nLevel : number;\n  wLevel: string;\n  progress: number;\n}\n\nfunction progressSerializer(progress: number): progressReturn {\n\n  let respond = {\n    color : '',\n    nLevel : 0,\n    wLevel: '',\n    progress: 0,\n  }\n\n  if (progress >= 0  && progress < 25) {\n    respond.color = 'bg-secondary'\n    respond.nLevel = 0\n    respond.wLevel = 'raw'\n    respond.progress = progress\n  } else if (progress >= 25  && progress < 50) {\n    respond.color = 'bg-danger'\n    respond.nLevel = 25\n    respond.wLevel = 'basic'\n    respond.progress = progress\n  } else if (progress >= 50  && progress < 75) {\n    respond.color = 'bg-warning'\n    respond.nLevel = 50\n    respond.wLevel = 'middle'\n    respond.progress = progress\n  } else if (progress >= 75  && progress < 100) {\n    respond.color = 'bg-primary'\n    respond.nLevel = 75\n    respond.wLevel = 'advance'\n    respond.progress = progress\n  } else if (progress === 100) {\n    respond.color = 'bg-success'\n    respond.nLevel = 100\n    respond.wLevel = 'done'\n    respond.progress = progress\n  }\n\n\n  return respond\n}\n\nfunction createURL(folder: string, title: string): string {\n  return `/${folder}/${title.replace(/ /g,'-')}`\n} \n\nfunction thumbnailPath(name: string ): string {\n  let respond = ''\n  if (name === 'js') {\n    respond = '../../../static/images/JavaScript_logo_2.png'\n  } else if ( name === 'python') {\n    respond = '../../../static/images/logoBn.png'\n  }\n  return respond\n}\n\nexport { progressSerializer, createURL, thumbnailPath }"],"names":["folder","title","project","progressObj","progressSerializer","progress","React","className","description","color","role","nLevel","style","width","Link","to","replace","numberOfProjects","data","useStaticQuery","allMdx","nodes","map","node","frontmatter","imageURL","id","slug","ProjectCard","key","slice","ProjectsLayout","respond","wLevel","createURL"],"sourceRoot":""}