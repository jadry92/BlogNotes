{"version":3,"file":"component---src-pages-projects-index-tsx-c4badf020dbf5e8568e0.js","mappings":"yJAcA,IA2BA,EA3BoB,SAAC,GAAyC,ICNlCA,EAEtBC,EDMeC,EAAgBC,EAFdC,EAAsC,EAAtCA,QAMfC,GCZoBL,EDYcI,EAAQJ,SCV5CC,EAAU,CACZK,MAAQ,GACRC,OAAS,EACTC,OAAQ,GACRR,SAAU,GAGRA,GAAY,GAAMA,EAAW,IAC/BC,EAAQK,MAAQ,eAChBL,EAAQM,OAAS,EACjBN,EAAQO,OAAS,MACjBP,EAAQD,SAAWA,GACVA,GAAY,IAAOA,EAAW,IACvCC,EAAQK,MAAQ,YAChBL,EAAQM,OAAS,GACjBN,EAAQO,OAAS,QACjBP,EAAQD,SAAWA,GACVA,GAAY,IAAOA,EAAW,IACvCC,EAAQK,MAAQ,aAChBL,EAAQM,OAAS,GACjBN,EAAQO,OAAS,SACjBP,EAAQD,SAAWA,GACVA,GAAY,IAAOA,EAAW,KACvCC,EAAQK,MAAQ,aAChBL,EAAQM,OAAS,GACjBN,EAAQO,OAAS,UACjBP,EAAQD,SAAWA,GACG,MAAbA,IACTC,EAAQK,MAAQ,aAChBL,EAAQM,OAAS,IACjBN,EAAQO,OAAS,OACjBP,EAAQD,SAAWA,GAIdC,GDvBP,OACEQ,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,sBACbD,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,gDACbD,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,aACbD,EAAAA,cAAAA,KAAAA,CAAIC,UAAU,0BAA0BN,EAAQD,OAChDM,EAAAA,cAAAA,IAAAA,CAAGC,UAAU,uBAAuBN,EAAQO,aAC5CF,EAAAA,cAACG,EAAAA,GAAD,CAAMF,UAAU,iBAAiBG,IAZtBX,EAYoCE,EAAQF,OAZ5BC,EAYoCC,EAAQD,MAXvE,IAAKD,EAAX,IAAqBC,EAAMW,QAAQ,KAAK,QAYlCL,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,YACbD,EAAAA,cAAAA,MAAAA,CAAKC,UAAS,gBAAkBL,EAAYC,MAC5CS,KAAK,cAAc,gBAAeV,EAAYE,OAC9C,gBAAe,EAAG,gBAAe,IACjCS,MAAO,CAAEC,MAAUZ,EAAYL,SAAjB,YE8B1B,EAzCuB,SAAC,GAAkC,IAAhCkB,EAA+B,EAA/BA,iBAElBC,GAAOC,EAAAA,EAAAA,IAAe,cAoB5B,OACEX,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,OACZS,EAAKE,OAAOC,MAAMC,KAAK,SAAEC,GACxB,IAAMpB,EAAU,CACdD,MAAQqB,EAAKC,YAAYtB,MACzBQ,YAAca,EAAKC,YAAYd,YAC/Be,SAAU,GACVC,GAAIH,EAAKG,GACTC,KAAOJ,EAAKI,KACZ1B,OAAQsB,EAAKC,YAAYvB,OACzBF,SAAUwB,EAAKC,YAAYzB,UAG7B,OAAOS,EAAAA,cAACoB,EAAD,CAAaC,IAAK1B,EAAQuB,GAAIvB,QAASA,OAC7C2B,MAAM,EAAEb,M,oDCxCjB,UAVkB,SAAC,GAAuB,EAArBC,KAGnB,OACEV,EAAAA,cAAAA,MAAAA,KACEA,EAAAA,cAACuB,EAAAA,EAAD,CAAgBd,iBAAkB","sources":["webpack://blog/./src/components/ProjectCard/index.tsx","webpack://blog/./src/utils/serializers.ts","webpack://blog/./src/components/ProjectsLayout/index.tsx","webpack://blog/./src/pages/projects/index.tsx"],"sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\nimport { progressSerializer } from '../../utils/serializers'\n\ninterface IProject {\n  title : string;\n  description : string;\n  imageURL: string;\n  id: string;\n  slug : string;\n  folder: string;\n  progress: number;\n}\n\nconst ProjectCard = ({ project }: { project : IProject }) => {\n  \n  const createURL = (folder: string, title: string): string => {\n    return `/${folder}/${title.replace(/ /g,'-')}`\n  } \n\n  const progressObj =  progressSerializer(project.progress)\n  \n  return (\n    <div className=\"col-sm-12 col-md-6\">\n      <div className=\"card mb-5 mx-4 border border-primary rounded\">\n        <div className=\"card-body\">\n          <h5 className=\"card-title text-center\">{project.title}</h5>\n          <p className=\"card-text text-dark\">{project.description}</p>\n          <Link className='stretched-link' to={createURL(project.folder, project.title)}></Link>\n          <div className=\"progress\">\n            <div className={`progress-bar ${progressObj.color}`} \n            role=\"progressbar\" aria-valuenow={progressObj.nLevel} \n            aria-valuemin={0} aria-valuemax={100} \n            style={{ width: `${progressObj.progress}%` }}></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ProjectCard","\ninterface progressReturn {\n  color : string;\n  nLevel : number;\n  wLevel: string;\n  progress: number;\n}\n\nfunction progressSerializer(progress: number): progressReturn {\n\n  let respond = {\n    color : '',\n    nLevel : 0,\n    wLevel: '',\n    progress: 0,\n  }\n\n  if (progress >= 0  && progress < 25) {\n    respond.color = 'bg-secondary'\n    respond.nLevel = 0\n    respond.wLevel = 'raw'\n    respond.progress = progress\n  } else if (progress >= 25  && progress < 50) {\n    respond.color = 'bg-danger'\n    respond.nLevel = 25\n    respond.wLevel = 'basic'\n    respond.progress = progress\n  } else if (progress >= 50  && progress < 75) {\n    respond.color = 'bg-warning'\n    respond.nLevel = 50\n    respond.wLevel = 'middle'\n    respond.progress = progress\n  } else if (progress >= 75  && progress < 100) {\n    respond.color = 'bg-primary'\n    respond.nLevel = 75\n    respond.wLevel = 'advance'\n    respond.progress = progress\n  } else if (progress === 100) {\n    respond.color = 'bg-success'\n    respond.nLevel = 100\n    respond.wLevel = 'done'\n    respond.progress = progress\n  }\n\n\n  return respond\n}\n\nexport { progressSerializer }","import React from 'react'\nimport \"./styles.scss\"\nimport { Link, useStaticQuery, graphql } from 'gatsby';\nimport { progressSerializer } from '../../utils/serializers'\nimport ProjectCard from '../ProjectCard';\nimport { count } from 'console';\n\ninterface INode {\n  id: string;\n  slug : string;\n  frontmatter : {\n    description : string;\n    title : string;\n    folder : string;\n    progress : number; \n  }\n}\n\ninterface IProps {\n  numberOfProjects: number | undefined\n}\n\nconst ProjectsLayout = ({ numberOfProjects }: IProps) => {\n \n  const data = useStaticQuery(graphql`\n    query GET_ALL_PROJECTS_HOME {\n      allMdx(\n        filter: {frontmatter: {folder: {eq: \"projects\"}, published: {eq: true}}}\n        sort: {fields: frontmatter___levelImportance, order: ASC}\n        ) {\n        nodes {\n          slug\n          id\n          frontmatter {\n            description\n            title\n            folder\n            progress\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <div className=\"row\">\n      {data.allMdx.nodes.map( ( node: INode ) => {\n        const project = {\n          title : node.frontmatter.title, \n          description : node.frontmatter.description,\n          imageURL: '',\n          id: node.id,\n          slug : node.slug,\n          folder: node.frontmatter.folder,\n          progress: node.frontmatter.progress,\n        }\n\n        return <ProjectCard key={project.id} project={project} />\n      }).slice(0,numberOfProjects)}\n    </div>\n  )\n}\n\nexport default ProjectsLayout ","import React from 'react'\nimport ProjectsLayout from '../../components/ProjectsLayout'\n\n\ninterface IProps {\n  data : []\n}\n\nconst Portfolio = ({ data } : IProps ) => {\n\n\n  return (\n    <div>\n      <ProjectsLayout numberOfProjects={4}/>\n    </div>\n  )\n}\n\nexport default Portfolio"],"names":["progress","respond","folder","title","project","progressObj","color","nLevel","wLevel","React","className","description","Link","to","replace","role","style","width","numberOfProjects","data","useStaticQuery","allMdx","nodes","map","node","frontmatter","imageURL","id","slug","ProjectCard","key","slice","ProjectsLayout"],"sourceRoot":""}